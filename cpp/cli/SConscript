# SConscript file for building cli.cpp
import sys
# Import SCons symbols
from SCons.Script import Environment, Dir, File
# Set build type: debug or release
build_type = ARGUMENTS.get('build', 'release')

if build_type == 'debug':
    env = Environment(CXXFLAGS=['-std=c++20', '-g', '-ggdb', '-O0', '-DDEBUG'], LINKFLAGS=['-rdynamic'])
    print('Building in DEBUG mode')
else:
    env = Environment(CXXFLAGS=['-std=c++20', '-O2'], LINKFLAGS=['-rdynamic'])
    print('Building in RELEASE mode')


# Add include paths for CLI11.hpp, spdlog, and local src headers using SCons path functions
cli11_include = Dir('#../lib/cli').abspath

spdlog_include = Dir('#../lib/spdlog/include').abspath
local_include = Dir('#src').abspath
log_setup_include = Dir('#../lib/log_setup').abspath
stacktrace_include = Dir('#../lib/stacktrace').abspath
json_include = Dir('#../lib/json/include').abspath
env.Append(CPPPATH=[cli11_include, spdlog_include, local_include, log_setup_include, stacktrace_include, json_include])

# Source files using SCons path functions through the build directory
sources = [
    File('#build/src/main.cpp').abspath,
    File('#build/src/common.cpp').abspath,
    File('#build/src/add.cpp').abspath,
    File('#build/src/multiply.cpp').abspath,
    File('#build/src/json_demo.cpp').abspath,
    File('#build/src/encdec_demo.cpp').abspath,
    File('#build/../../lib/stacktrace/stacktrace.cpp').abspath,
    File('#build/../../lib/log_setup/log.cpp').abspath,
]

# Define FMT_HEADER_ONLY globally for all files
env.Append(CPPDEFINES=['FMT_HEADER_ONLY'])

# Build only the main CLI executable
env.Program(target='run', source=sources)
